//Elaina Chung
//APCS pd1
//HW55 -- His Toe Grammar
//2016-01-04

/***
    An AP-style question, for practice...
    Write the StatPrinter class below. The StatPrinter Object receives an
    ArrayList of nonnegative integers, then builds a frequency ArrayList where
    the index values are the data and the entry at the index is the frequency.
    For example, if the received data is : 2,3,2,5,1,3 then the frequency 
    list would be [0,1,2,2,0,1]. This is read as 0 zeroes, 1 one, 2 twos,
    2 threes, 0 fours, 1 five. The size of the frequency list is the equal to
    the maximum value of the data.
    A capability of the class is to calculate local modes from the frequency 
    list. A local mode is a value that is greater than the value at index - 1 
    and greater than the value at index + 1. A local mode is never at the end
    points of the list. For example if the frequency list is [1,2,1,4,2,3,5] 
    then the local modes are: 2 and 4.
    This class is also capable of printing a histogram of the frequencies, using
    * to indicate a frequency amount. To print a histogram, the user specifies
    the longest sequence of *s used and then all other values are printed in 
    proportion to this value. For example, if longest bar is 10 and the frequency
    list is [1,2,1,4,2,3,5] then the histogram printed looks like this:
    0 : **
    1 : ****
    2 : **
    3 : ********
    4 : ****
    5 : ******
    6 : **********
    For each method, state the run time efficiencies using Big O notation.
    =======================================
    Tip:
    * Develop 1 fxn at a time, test it, then move to next.
    * Look over all, think a bit, decide which to tackle first.
    ( Simplest?  Prerequisite? . . . )
    * Coding today, what extra code do you need to get past Mr. Compiler?
    ***/
//not sure about what extra code is needed to get past Mr. Compiler, but I had to make my own data set in the main function to test it.
import java.util.ArrayList;

public class StatPrinter 
{

    // instance variable for frequencies of each integer in input ArrayList
    private ArrayList <Integer> _frequency;


    //*************** QUESTION 02 **************************
    //precond:  data.size() > 0, each entry b/t 0,100 inclusive
    //postcond: _frequency.size() set to max(data) + 1
    //          _frequency.get(i) returns frequency of i in data
    //eg, for data [2,3,2,5,2,3]
    //  _frequency would be [0,0,3,2,0,1]
    
    public StatPrinter( ArrayList <Integer> data ) 
    {
	_frequency = new ArrayList<Integer>();
        for(int i = 0; i < (int)max(data) + 1; i++){
	    _frequency.add(0);
	}
	for(int x = 0; x < data.size(); x++){
	    _frequency.set(data.get(x),_frequency.get(data.get(x)) + 1);
	}
    }
   
    public ArrayList<Integer> getFrequency()
    {
	return _frequency;
    }
    
    //*************** QUESTION 01 **************************
    //precond:  data.size() > 0
    //postcond: returns largest integer in data
    public Integer max( ArrayList <Integer> data ) 
    { 
        int m = data.get(0);
	for(int i = 0; i < data.size(); i++){
	    if(m < data.get(i)){
		m = data.get(i);
	    }
	}
	return m;
    }


    //*************** QUESTION 03 **************************
    //postcond: returns true if i > 0 and i < _frequency.size() - 1
    //          and _frequency.get( i - 1 ) < _frequency.get( i )
    //          and _frequency.get( i + 1 ) < _frequency.get( i )
    //          Otherwise, returns false
    //eg, for _frequency [1,2,1,5,5,8,2,4]
    //    2 and 8 are local modes, so
    //    isLocalMode(0) -> false
    //    isLocalMode(1) -> true
    //    isLocalMode(5) -> true
    public boolean isLocalMode( int i ) 
    { 
        return(i > 0 && i < _frequency.size() - 1 && _frequency.get(i - 1) < _frequency.get(i) && _frequency.get(i + 1) < _frequency.get(i));
    }


    //*************** QUESTION 04 **************************
    //postcond: returns list of modes in _frequency
    public ArrayList <Integer> getLocalModes() 
    {
        ArrayList<Integer> modes = new ArrayList<Integer>(0);
	for(int i = 0; i < _frequency.size(); i++){
	    if(isLocalMode(i)){
		modes.add(_frequency.get(i));
	    }
	}
	return modes;
    }//O(?)


    //*************** QUESTION 05 **************************
    //precond:  longestBar > 0
    public void printHistogram( int longestBar ) 
    { 
        String graph = "";
	int prop = longestBar/max(_frequency);
	for(int i = 0; i < _frequency.size(); i++){
	    graph += "\n" + i + ": ";
	    for(int x = _frequency.get(i)*prop; x > 0; x--){
		graph += "*";
	    }
	}
	System.out.println(graph);
       
    }//O(?) linear because it has to go through _frequency

    public static void main(String[] args){
	ArrayList<Integer> data = new ArrayList<Integer>();
        data.add(2);
	data.add(3);
	data.add(2);
	data.add(5);
	data.add(1);
	data.add(3);
	data.add(2);
        System.out.println(data.size());
	System.out.println(data);
    
	StatPrinter groot = new StatPrinter(data);
	System.out.println(groot._frequency);
	System.out.println(groot.max(data));
	System.out.println(groot.isLocalMode(0));
	System.out.println(groot.isLocalMode(2));
	System.out.println(groot.getLocalModes());
	groot.printHistogram(9);
	groot.printHistogram(5);
    }
}//end class StatPrinter
